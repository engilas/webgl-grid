{"version":3,"sources":["Shader.ts","Line.ts","Renderer.ts","App.tsx","index.tsx"],"names":["Shader","gl","vsSource","fsSource","programId","this","createProgram","initShaderProgram","useProgram","name","mat","uniformMatrix4fv","getUniformLocation","vec","uniform3fv","location","getAttribLocation","Error","vertexShader","loadShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","infoLog","getShaderInfoLog","deleteShader","Line","begin","end","buffer","initBuffer","model","color","setupBuffer","use","setMat4","setVec3","drawArrays","LINES","createBuffer","bindBuffer","ARRAY_BUFFER","data","flat","bufferData","Float32Array","STATIC_DRAW","FLOAT","posLocation","vertexAttribPointer","enableVertexAttribArray","getNdc","screenCoord","dimLenght","clamp","value","min","max","Math","Renderer","canvas","width","height","vertShader","fragShader","center","isMouseDown","startPos","line","scale","zoom","addEventListener","e","startMoving","clientX","clientY","_","stopMoving","move","onWheel","touches","x","y","render","event","sign","deltaY","exp","viewport","gridSteps","i","push","length","gridLines","sort","map","getGridLines","xAxisModel","mat4","create","yAxisModel","translate","rotateZ","glMatrix","toRadian","lines","drawScene","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","draw","step","lineColor","getLineColor","getXModels","getYModels","maxDim","minColor","Array","fill","getGridLineModels","offset","originOffset","getModel","models","w0","w1","s","floor","fetchFile","path","a","fetch","response","text","App","canvasRef","useRef","useState","window","innerWidth","innerHeight","canvasSize","setCanvasSize","renderer","setRenderer","useEffect","current","getContext","Promise","all","onresize","resize","ref","id","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.606c15ff.chunk.js","sourcesContent":["import { mat4 } from \"gl-matrix\";\r\n\r\nexport class Shader {\r\n    private gl: WebGLRenderingContext;\r\n    private vsSource: string;\r\n    private fsSource: string;\r\n    private programId: WebGLProgram;\r\n\r\n    constructor(gl: WebGLRenderingContext, vsSource: string, fsSource: string) {\r\n        this.gl = gl;\r\n        this.vsSource = vsSource;\r\n        this.fsSource = fsSource;\r\n        this.programId = this.gl.createProgram();\r\n        this.initShaderProgram();\r\n    }\r\n\r\n    public use() {\r\n        this.gl.useProgram(this.programId);\r\n    }\r\n\r\n    public setMat4(name: string, mat: mat4) {\r\n        this.gl.uniformMatrix4fv(this.getUniformLocation(name), false, mat);\r\n    }\r\n\r\n    public setVec3(name: string, vec: number[]) {\r\n        this.gl.uniform3fv(this.getUniformLocation(name), vec);\r\n    }\r\n\r\n    public getAttribLocation(name: string) {\r\n        const location = this.gl.getAttribLocation(this.programId, name);\r\n        if (location === -1) {\r\n            throw new Error(\"No attrib with name \" + name);\r\n        }\r\n        return location;\r\n    }\r\n\r\n    private getUniformLocation(name: string) {\r\n        const location = this.gl.getUniformLocation(this.programId, name);\r\n        if (!location) {\r\n            throw new Error(\"No uniform with name \" + name);\r\n        }\r\n        return location;\r\n    }\r\n\r\n    private initShaderProgram() {\r\n        const vertexShader = this.loadShader(this.gl.VERTEX_SHADER, this.vsSource);\r\n        const fragmentShader = this.loadShader(this.gl.FRAGMENT_SHADER, this.fsSource);\r\n\r\n        this.gl.attachShader(this.programId, vertexShader);\r\n        this.gl.attachShader(this.programId, fragmentShader);\r\n        this.gl.linkProgram(this.programId);\r\n\r\n        if (!this.gl.getProgramParameter(this.programId, this.gl.LINK_STATUS)) {\r\n            throw new Error('Unable to initialize the shader program: ' + this.gl.getProgramInfoLog(this.programId));\r\n        }\r\n    }\r\n\r\n    private loadShader(type: number, source: string) {\r\n        const shader = this.gl.createShader(type);\r\n        if (!shader) {\r\n            throw new Error(\"Shader loading failed\");\r\n        }\r\n\r\n        this.gl.shaderSource(shader, source);\r\n        this.gl.compileShader(shader);\r\n\r\n        if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\r\n            const infoLog = this.gl.getShaderInfoLog(shader);\r\n            this.gl.deleteShader(shader);\r\n            throw new Error(\"An error occurred compiling the shaders: \" + infoLog);\r\n        }\r\n\r\n        return shader;\r\n    }\r\n}\r\n\r\n","import { Shader } from \"./Shader\";\r\nimport { mat4 } from \"gl-matrix\"\r\n\r\nexport default class Line {\r\n    private begin: number[];\r\n    private end: number[];\r\n    private gl: WebGLRenderingContext;\r\n    private shader: Shader;\r\n    private buffer: WebGLBuffer = {};\r\n\r\n    constructor(gl: WebGLRenderingContext, shader: Shader) {\r\n        this.begin = [-1.0, 0.0];\r\n        this.end = [1.0, 0.0];\r\n        this.gl = gl;\r\n        this.shader = shader;\r\n        this.initBuffer();\r\n    }\r\n\r\n    public draw(model: mat4, color: number[]) {\r\n        this.setupBuffer();\r\n        this.shader.use();\r\n        this.shader.setMat4(\"uModelViewMatrix\", model);\r\n        this.shader.setVec3(\"uColor\", color);\r\n        const offset = 0;\r\n        const vertexCount = 2;\r\n        this.gl.drawArrays(this.gl.LINES, offset, vertexCount);\r\n    }\r\n\r\n    private initBuffer() {\r\n        const buffer = this.gl.createBuffer();\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, buffer);\r\n\r\n        const data = [\r\n            this.begin,\r\n            this.end,\r\n        ].flat();\r\n\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER,\r\n            new Float32Array(data),\r\n            this.gl.STATIC_DRAW);\r\n\r\n        this.buffer = buffer;\r\n    }\r\n\r\n    private setupBuffer() {\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffer);\r\n        const type = this.gl.FLOAT;\r\n        const normalize = false;\r\n        const posLocation = this.shader.getAttribLocation('aPos');\r\n        this.gl.vertexAttribPointer(posLocation, 2, type, normalize, 0, 0);\r\n        this.gl.enableVertexAttribArray(posLocation);\r\n    }\r\n}","import { Shader } from './Shader';\r\nimport Line from './Line';\r\nimport { mat4, glMatrix } from 'gl-matrix';\r\n\r\ntype DrawLine = {\r\n    line: Line;\r\n    color: number[];\r\n    model: mat4;\r\n}\r\n\r\nconst backgroundGrayscale = 0.2;\r\n\r\nclass Renderer {\r\n    private width: number;\r\n    private height: number;\r\n    private center = [0, 0];\r\n    private shader: Shader | null = null;\r\n    private isMouseDown = false;\r\n    private startPos = [0, 0];\r\n    private gl: WebGLRenderingContext;\r\n    private line: Line;\r\n    private scale = 1.0;\r\n\r\n    private zoom: number = 0;\r\n\r\n    constructor(\r\n        gl: WebGLRenderingContext, canvas: HTMLCanvasElement,\r\n        width: number, height: number,\r\n        vertShader: string, fragShader: string) {\r\n\r\n        this.gl = gl;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        canvas.addEventListener(\"mousedown\", e => this.startMoving(e.clientX, e.clientY));\r\n        canvas.addEventListener(\"mouseup\", _ => this.stopMoving());\r\n        canvas.addEventListener(\"mousemove\", e => this.move(e.clientX, e.clientY));\r\n        canvas.addEventListener(\"wheel\", e => this.onWheel(e));\r\n        canvas.addEventListener(\"touchstart\", e => this.startMoving(e.touches[0].clientX, e.touches[0].clientY))\r\n        canvas.addEventListener(\"touchend\", e => this.stopMoving())\r\n        canvas.addEventListener(\"touchmove\", e => this.move(e.touches[0].clientX, e.touches[0].clientY))\r\n\r\n        this.shader = new Shader(this.gl, vertShader, fragShader);\r\n        this.line = new Line(this.gl, this.shader);\r\n    }\r\n\r\n    private startMoving(x: number, y: number) {\r\n        this.isMouseDown = true;\r\n        this.startPos = [\r\n            this.center[0] + x / this.scale,\r\n            this.center[1] - y / this.scale,\r\n        ];\r\n    }\r\n\r\n    private stopMoving() {\r\n        this.isMouseDown = false;\r\n    }\r\n\r\n    private move(x: number, y: number) {\r\n        if (!this.isMouseDown) return;\r\n        this.center = [\r\n            this.startPos[0] - x / this.scale,\r\n            this.startPos[1] + y / this.scale\r\n        ];\r\n        this.render();\r\n    }\r\n\r\n    private onWheel(event: WheelEvent) {\r\n        this.zoom = clamp(this.zoom - Math.sign(event.deltaY) * 0.15, -9, 10.05);\r\n        this.scale = Math.exp(this.zoom);\r\n        this.render();\r\n    }\r\n\r\n    resize(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.gl.viewport(0, 0, width, height);\r\n    }\r\n\r\n    render() {\r\n        if (!this.shader) return;\r\n\r\n        const levelscount = 7;\r\n        const gridSteps: number[] = [250 * 1000];\r\n        for (let i = 0; i < levelscount; i++) {\r\n            gridSteps.push(gridSteps[gridSteps.length - 1] / 10);\r\n        }\r\n        const gridLines: DrawLine[] = gridSteps.sort().map(x => this.getGridLines(x)).flat();\r\n\r\n        const xAxisModel = mat4.create();\r\n        const yAxisModel = mat4.create();\r\n        mat4.translate(xAxisModel, xAxisModel, [0, getNdc(-this.center[1], this.height / this.scale) + 1, 0]);\r\n        mat4.translate(yAxisModel, yAxisModel, [getNdc(-this.center[0], this.width / this.scale) + 1, 0, 0]);\r\n        mat4.rotateZ(yAxisModel, yAxisModel, glMatrix.toRadian(90));\r\n\r\n        const xLine = { line: this.line, color: [1, 0.3, 0.3], model: xAxisModel };\r\n        const yLine = { line: this.line, color: [0.3, 1, 0.3], model: yAxisModel };\r\n\r\n        const lines = [\r\n            gridLines,\r\n            [xLine],\r\n            [yLine],\r\n        ].flat();\r\n\r\n        this.drawScene(lines);\r\n    }\r\n\r\n    private drawScene(lines: DrawLine[]) {\r\n        this.gl.clearColor(backgroundGrayscale, backgroundGrayscale, backgroundGrayscale, 1);\r\n        this.gl.clearDepth(1.0);\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        this.gl.depthFunc(this.gl.LEQUAL);\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\r\n\r\n        for (const { line, color, model } of lines) {\r\n            line.draw(model, color);\r\n        }\r\n    }\r\n\r\n    private getGridLines(step: number) {\r\n        if (step * this.scale <= 5) return [];\r\n        const lineColor = this.getLineColor(step);\r\n        const xLines: DrawLine[] = this.getXModels(step).map(model => {\r\n            return { line: this.line, color: lineColor, model: model };\r\n        });\r\n        const yLines: DrawLine[] = this.getYModels(step).map(model => {\r\n            return { line: this.line, color: lineColor, model: model };\r\n        });\r\n        return [xLines, yLines].flat();\r\n    }\r\n\r\n    private getLineColor(step: number) {\r\n        const minColor = backgroundGrayscale;\r\n        const maxColor = minColor + 0.15;\r\n        const scale = maxColor - minColor;\r\n        const offset = minColor;\r\n        const maxDim = Math.max(this.width, this.height) / 2 / this.scale;\r\n        const x = Math.min(step / (5 * maxDim) + 0.8, 4 * step / maxDim);\r\n\r\n        const color = scale * clamp(x, 0, 1) + offset;\r\n\r\n        return Array<number>(3).fill(color);\r\n    }\r\n\r\n    private getXModels(step: number) {\r\n        return this.getGridLineModels(step, this.height, this.center[1], offset => {\r\n            const model = mat4.create();\r\n            mat4.translate(model, model, [0, offset, 0]);\r\n            return model;\r\n        });\r\n    }\r\n\r\n    private getYModels(step: number) {\r\n        return this.getGridLineModels(step, this.width, this.center[0], offset => {\r\n            const model = mat4.create();\r\n            mat4.translate(model, model, [offset, 0, 0]);\r\n            mat4.rotateZ(model, model, glMatrix.toRadian(90));\r\n            return model;\r\n        });\r\n    }\r\n\r\n    private getGridLineModels(step: number, dimLenght: number, originOffset: number, getModel: (offset: number) => mat4) {\r\n        dimLenght /= this.scale;\r\n        const models: mat4[] = [];\r\n        const w0 = originOffset - dimLenght / 2;\r\n        const w1 = w0 + dimLenght;\r\n        let s = Math.floor(w0 / step) * step + step;\r\n        while (s < w1) {\r\n            models.push(getModel(getNdc(s - w0, dimLenght)));\r\n            s += step;\r\n        }\r\n        return models;\r\n    }\r\n}\r\n\r\nfunction getNdc(screenCoord: number, dimLenght: number) {\r\n    return 2 * screenCoord / dimLenght - 1;\r\n}\r\n\r\nfunction clamp(value: number, min: number, max: number) {\r\n    return Math.min(Math.max(value, min), max);\r\n}\r\n\r\nexport default Renderer;\r\n","import React, { useEffect, useState, useRef } from 'react';\nimport Renderer from './Renderer';\n\nconst App = () => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const [canvasSize, setCanvasSize] = useState([window.innerWidth, window.innerHeight]);\n    const [renderer, setRenderer] = useState<Renderer>(null);\n\n    useEffect(() => {\n        (async () => {\n            const canvas = canvasRef.current;\n            const gl = canvas.getContext(\"webgl\");\n            if (gl === null) {\n                throw new Error(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\n            }\n            const [fragShader, vertShader] = await Promise.all([fetchFile(\"shaders/app.vert\"), fetchFile(\"shaders/app.frag\")]);\n            const renderer = new Renderer(gl, canvas, canvas.width, canvas.height, fragShader, vertShader);\n            window.onresize = function () {\n                setCanvasSize([window.innerWidth, window.innerHeight]);\n            }\n            renderer.render();\n            setRenderer(renderer);\n        })();\n    }, []);\n\n    useEffect(() => {\n        if (!renderer) {\n            return;\n        }\n        renderer.resize(canvasSize[0], canvasSize[1]);\n        renderer.render();\n    }, [renderer, canvasSize]);\n\n    return (\n        <canvas ref={canvasRef} width={canvasSize[0]} height={canvasSize[1]} id=\"glCanvas\"></canvas>\n    )\n}\n\nconst fetchFile = async (path: string) => {\n    const response = await fetch(path);\n    return await response.text()\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}